// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -destination mock/repository_mock.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/kenesparta/fullcycle-ratelimiter/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAPITokenRepository is a mock of APITokenRepository interface.
type MockAPITokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPITokenRepositoryMockRecorder
}

// MockAPITokenRepositoryMockRecorder is the mock recorder for MockAPITokenRepository.
type MockAPITokenRepositoryMockRecorder struct {
	mock *MockAPITokenRepository
}

// NewMockAPITokenRepository creates a new mock instance.
func NewMockAPITokenRepository(ctrl *gomock.Controller) *MockAPITokenRepository {
	mock := &MockAPITokenRepository{ctrl: ctrl}
	mock.recorder = &MockAPITokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPITokenRepository) EXPECT() *MockAPITokenRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockAPITokenRepository) Save(token entity.APIToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAPITokenRepositoryMockRecorder) Save(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAPITokenRepository)(nil).Save), token)
}

// MockIPRepository is a mock of IPRepository interface.
type MockIPRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPRepositoryMockRecorder
}

// MockIPRepositoryMockRecorder is the mock recorder for MockIPRepository.
type MockIPRepositoryMockRecorder struct {
	mock *MockIPRepository
}

// NewMockIPRepository creates a new mock instance.
func NewMockIPRepository(ctrl *gomock.Controller) *MockIPRepository {
	mock := &MockIPRepository{ctrl: ctrl}
	mock.recorder = &MockIPRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPRepository) EXPECT() *MockIPRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockIPRepository) Save(ip entity.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIPRepositoryMockRecorder) Save(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIPRepository)(nil).Save), ip)
}
